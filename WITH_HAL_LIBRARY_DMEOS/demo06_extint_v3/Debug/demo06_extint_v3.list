
demo06_extint_v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000294  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  0800041c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000424  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014e4  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005e4  00000000  00000000  00003512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000001cb  00000000  00000000  00003af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000e8  00000000  00000000  00003cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000d7  00000000  00000000  00003db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00018148  00000000  00000000  00003e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00001576  00000000  00000000  0001bfcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008bd06  00000000  00000000  0001d545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000a924b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000158  00000000  00000000  000a9290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  000a93e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000404 	.word	0x08000404

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000404 	.word	0x08000404

080001c8 <LedInit>:
#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001c8:	4913      	ldr	r1, [pc, #76]	@ (8000218 <LedInit+0x50>)
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001ca:	4b14      	ldr	r3, [pc, #80]	@ (800021c <LedInit+0x54>)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001cc:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80001ce:	f042 0208 	orr.w	r2, r2, #8
void LedInit(uint32_t pin) {
 80001d2:	b410      	push	{r4}
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80001d4:	630a      	str	r2, [r1, #48]	@ 0x30
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80001d6:	0041      	lsls	r1, r0, #1
 80001d8:	681c      	ldr	r4, [r3, #0]
 80001da:	f04f 0c01 	mov.w	ip, #1
 80001de:	1c4a      	adds	r2, r1, #1
 80001e0:	fa0c f202 	lsl.w	r2, ip, r2
 80001e4:	ea24 0402 	bic.w	r4, r4, r2
 80001e8:	601c      	str	r4, [r3, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 80001ea:	fa0c f101 	lsl.w	r1, ip, r1
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 80001ee:	fa0c fc00 	lsl.w	ip, ip, r0
	LED_GPIO->MODER |= BV(pin * 2);
 80001f2:	6818      	ldr	r0, [r3, #0]
}
 80001f4:	bc10      	pop	{r4}
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80001f6:	430a      	orrs	r2, r1
	LED_GPIO->MODER |= BV(pin * 2);
 80001f8:	4301      	orrs	r1, r0
 80001fa:	6019      	str	r1, [r3, #0]
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80001fc:	6899      	ldr	r1, [r3, #8]
 80001fe:	ea21 0102 	bic.w	r1, r1, r2
 8000202:	6099      	str	r1, [r3, #8]
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000204:	68d9      	ldr	r1, [r3, #12]
 8000206:	ea21 0202 	bic.w	r2, r1, r2
 800020a:	60da      	str	r2, [r3, #12]
	LED_GPIO->OTYPER &= ~BV(pin);
 800020c:	685a      	ldr	r2, [r3, #4]
 800020e:	ea22 020c 	bic.w	r2, r2, ip
 8000212:	605a      	str	r2, [r3, #4]
}
 8000214:	4770      	bx	lr
 8000216:	bf00      	nop
 8000218:	40023800 	.word	0x40023800
 800021c:	40020c00 	.word	0x40020c00

08000220 <LedBlink>:

void LedOn(uint32_t pin) {
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000220:	4a0f      	ldr	r2, [pc, #60]	@ (8000260 <LedBlink+0x40>)
 8000222:	f04f 0c01 	mov.w	ip, #1
 8000226:	6953      	ldr	r3, [r2, #20]
 8000228:	fa0c fc00 	lsl.w	ip, ip, r0
 800022c:	ea4c 0303 	orr.w	r3, ip, r3
#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
	uint32_t ticks = (SystemCoreClock / 1000);
 8000230:	480c      	ldr	r0, [pc, #48]	@ (8000264 <LedBlink+0x44>)
void LedOff(uint32_t pin) {
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
}

void LedBlink(uint32_t pin, uint32_t delay) {
 8000232:	b410      	push	{r4}
	LED_GPIO->ODR |= BV(pin);
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	6803      	ldr	r3, [r0, #0]
 8000238:	4c0b      	ldr	r4, [pc, #44]	@ (8000268 <LedBlink+0x48>)
	uint32_t init_ticks = DWT->CYCCNT;
 800023a:	4a0c      	ldr	r2, [pc, #48]	@ (800026c <LedBlink+0x4c>)
	uint32_t ticks = (SystemCoreClock / 1000);
 800023c:	fba4 4303 	umull	r4, r3, r4, r3
 8000240:	099b      	lsrs	r3, r3, #6
	uint32_t init_ticks = DWT->CYCCNT;
 8000242:	6850      	ldr	r0, [r2, #4]
	ms *= ticks;
 8000244:	fb03 f101 	mul.w	r1, r3, r1
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000248:	6853      	ldr	r3, [r2, #4]
 800024a:	1a1b      	subs	r3, r3, r0
 800024c:	428b      	cmp	r3, r1
 800024e:	d3fb      	bcc.n	8000248 <LedBlink+0x28>
	LED_GPIO->ODR &= ~BV(pin);
 8000250:	4a03      	ldr	r2, [pc, #12]	@ (8000260 <LedBlink+0x40>)
	LedOn(pin);
	DelayMs(delay);
	LedOff(pin);
}
 8000252:	bc10      	pop	{r4}
	LED_GPIO->ODR &= ~BV(pin);
 8000254:	6953      	ldr	r3, [r2, #20]
 8000256:	ea23 030c 	bic.w	r3, r3, ip
 800025a:	6153      	str	r3, [r2, #20]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40020c00 	.word	0x40020c00
 8000264:	20000000 	.word	0x20000000
 8000268:	10624dd3 	.word	0x10624dd3
 800026c:	e0001000 	.word	0xe0001000

08000270 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000270:	b508      	push	{r3, lr}
	SystemInit();
 8000272:	f000 f857 	bl	8000324 <SystemInit>
	LedInit(LED_ORANGE);
 8000276:	200d      	movs	r0, #13
 8000278:	f7ff ffa6 	bl	80001c8 <LedInit>
	SwitchInit(SWITCH);
 800027c:	2000      	movs	r0, #0
 800027e:	f000 f80f 	bl	80002a0 <SwitchInit>
 8000282:	4c06      	ldr	r4, [pc, #24]	@ (800029c <main+0x2c>)
		// wait until switch interrupt generated
		while(exti0_flag == 0)
			;
		// Blink the Led
		LedBlink(LED_ORANGE, 1000);
		exti0_flag = 0;
 8000284:	2500      	movs	r5, #0
		while(exti0_flag == 0)
 8000286:	6823      	ldr	r3, [r4, #0]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0fc      	beq.n	8000286 <main+0x16>
		LedBlink(LED_ORANGE, 1000);
 800028c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000290:	200d      	movs	r0, #13
 8000292:	f7ff ffc5 	bl	8000220 <LedBlink>
		exti0_flag = 0;
 8000296:	6025      	str	r5, [r4, #0]
		while(exti0_flag == 0)
 8000298:	e7f5      	b.n	8000286 <main+0x16>
 800029a:	bf00      	nop
 800029c:	20000020 	.word	0x20000020

080002a0 <SwitchInit>:

#include "switch.h"

void SwitchInit(uint32_t pin) {
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80002a0:	4916      	ldr	r1, [pc, #88]	@ (80002fc <SwitchInit+0x5c>)
	// set gpio pin as input (in MODER)
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002a2:	4a17      	ldr	r2, [pc, #92]	@ (8000300 <SwitchInit+0x60>)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80002a4:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80002a6:	f043 0301 	orr.w	r3, r3, #1
void SwitchInit(uint32_t pin) {
 80002aa:	b410      	push	{r4}
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002ac:	0040      	lsls	r0, r0, #1
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80002ae:	630b      	str	r3, [r1, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002b0:	2101      	movs	r1, #1
 80002b2:	1843      	adds	r3, r0, r1
 80002b4:	6814      	ldr	r4, [r2, #0]
 80002b6:	fa01 f303 	lsl.w	r3, r1, r3
 80002ba:	4081      	lsls	r1, r0
 80002bc:	430b      	orrs	r3, r1
 80002be:	ea24 0403 	bic.w	r4, r4, r3
 80002c2:	6014      	str	r4, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002c4:	6890      	ldr	r0, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
	// enable falling edge detection (in FTSR)
	EXTI->FTSR |= BV(SWITCH);
 80002c6:	490f      	ldr	r1, [pc, #60]	@ (8000304 <SwitchInit+0x64>)
	// select exti interrupt (in SYSCFG->EXTICRx)
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
	// enable exti in NVIC (ISER or NVIC_EnableIRQ())
	//NVIC->ISER[0] |= BV(EXTI0_IRQn);
	NVIC_EnableIRQ(EXTI0_IRQn);
}
 80002c8:	bc10      	pop	{r4}
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002ca:	ea20 0003 	bic.w	r0, r0, r3
 80002ce:	6090      	str	r0, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80002d0:	68d0      	ldr	r0, [r2, #12]
 80002d2:	ea20 0303 	bic.w	r3, r0, r3
 80002d6:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 80002d8:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002da:	480b      	ldr	r0, [pc, #44]	@ (8000308 <SwitchInit+0x68>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	60cb      	str	r3, [r1, #12]
	EXTI->IMR |= BV(SWITCH);
 80002e2:	680b      	ldr	r3, [r1, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80002e4:	f5a2 4248 	sub.w	r2, r2, #51200	@ 0xc800
	EXTI->IMR |= BV(SWITCH);
 80002e8:	f043 0301 	orr.w	r3, r3, #1
 80002ec:	600b      	str	r3, [r1, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 80002ee:	6893      	ldr	r3, [r2, #8]
 80002f0:	2140      	movs	r1, #64	@ 0x40
 80002f2:	f023 030f 	bic.w	r3, r3, #15
 80002f6:	6093      	str	r3, [r2, #8]
 80002f8:	6001      	str	r1, [r0, #0]
}
 80002fa:	4770      	bx	lr
 80002fc:	40023800 	.word	0x40023800
 8000300:	40020000 	.word	0x40020000
 8000304:	40013c00 	.word	0x40013c00
 8000308:	e000e100 	.word	0xe000e100

0800030c <EXTI0_IRQHandler>:
volatile int exti0_flag = 0;

// Switch EXTT0 IRQ Handler
void EXTI0_IRQHandler(void) {
    // Acknowledge interrupt (in PR)
	EXTI->PR |= BV(SWITCH);
 800030c:	4a03      	ldr	r2, [pc, #12]	@ (800031c <EXTI0_IRQHandler+0x10>)
	// Handle interrupt
	exti0_flag = 1;
 800030e:	4904      	ldr	r1, [pc, #16]	@ (8000320 <EXTI0_IRQHandler+0x14>)
	EXTI->PR |= BV(SWITCH);
 8000310:	6953      	ldr	r3, [r2, #20]
	exti0_flag = 1;
 8000312:	2001      	movs	r0, #1
	EXTI->PR |= BV(SWITCH);
 8000314:	4303      	orrs	r3, r0
 8000316:	6153      	str	r3, [r2, #20]
	exti0_flag = 1;
 8000318:	6008      	str	r0, [r1, #0]
}
 800031a:	4770      	bx	lr
 800031c:	40013c00 	.word	0x40013c00
 8000320:	20000020 	.word	0x20000020

08000324 <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000324:	4a0e      	ldr	r2, [pc, #56]	@ (8000360 <SystemInit+0x3c>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000326:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <SystemInit+0x40>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000328:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 800032c:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8000330:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000334:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 8000338:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 800033c:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	f022 0201 	bic.w	r2, r2, #1
 8000346:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000348:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800034a:	2000      	movs	r0, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800034c:	f042 0201 	orr.w	r2, r2, #1
 8000350:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 8000352:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000354:	bf00      	nop
    __ASM volatile ("NOP");
 8000356:	bf00      	nop
    __ASM volatile ("NOP");
 8000358:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 800035a:	685b      	ldr	r3, [r3, #4]
}
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	e000ed00 	.word	0xe000ed00
 8000364:	e0001000 	.word	0xe0001000

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f7ff ffda 	bl	8000324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	@ (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	@ (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff69 	bl	8000270 <main>

0800039e <LoopForever>:

LoopForever:
  b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b4:	20000024 	.word	0x20000024

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	@ (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	@ (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	@ (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
